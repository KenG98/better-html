(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.inlinedFiles = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
// This module is necessary because the user of the CLI won't have the dependencies.
// This will inline the dependencies using browserify so that it can write to the
// user's output folder.

// After making changes here, get browserify and run:
// browserify -t brfs inlined-files.js --standalone inlinedFiles --node -o inlined-files-bundle.js
// or install dev dependencies and run 
// node ../node_modules/browserify/bin/cmd.js -t brfs inlined_files.js --standalone inlinedFiles --node -o inlined_files_bundle.js



module.exports = {
  // necessary files to include
  "purecss/grids-responsive-min.css": 
      Buffer("","base64"),
  "purecss/pure-min.css": 
      Buffer("","base64"),
  "rainbow/rainbow.js": 
      Buffer("","base64"),
  "rainbow/generic.js": 
      Buffer("ICAgIC8qKgogKiBHZW5lcmljIGxhbmd1YWdlIHBhdHRlcm5zCiAqCiAqIEBhdXRob3IgQ3JhaWcgQ2FtcGJlbGwKICovClJhaW5ib3cuZXh0ZW5kKCdnZW5lcmljJywgWwogICAgewogICAgICAgIG1hdGNoZXM6IHsKICAgICAgICAgICAgMTogWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIG5hbWU6ICdrZXl3b3JkLm9wZXJhdG9yJywKICAgICAgICAgICAgICAgICAgICBwYXR0ZXJuOiAvXD18XCsvZwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBuYW1lOiAna2V5d29yZC5kb3QnLAogICAgICAgICAgICAgICAgICAgIHBhdHRlcm46IC9cLi9nCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDI6IHsKICAgICAgICAgICAgICAgIG5hbWU6ICdzdHJpbmcnLAogICAgICAgICAgICAgICAgbWF0Y2hlczogewogICAgICAgICAgICAgICAgICAgIG5hbWU6ICdjb25zdGFudC5jaGFyYWN0ZXIuZXNjYXBlJywKICAgICAgICAgICAgICAgICAgICBwYXR0ZXJuOiAvXFwoJ3wiKXsxfS9nCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIHBhdHRlcm46IC8oXCh8XHN8XFt8XD18OnxcK3xcLnxce3wsKSgoJ3wiKShbXlxcXDFdfFxcLikqPyhcMykpL2dtCiAgICB9LAogICAgewogICAgICAgIG5hbWU6ICdjb21tZW50JywKICAgICAgICBwYXR0ZXJuOiAvXC9cKltcc1xTXSo/XCpcL3woXC9cL3xcIykoPyEuKignfCIpLio/W146XShcL1wvfFwjKSkuKj8kL2dtCiAgICB9LAogICAgewogICAgICAgIG5hbWU6ICdjb25zdGFudC5udW1lcmljJywKICAgICAgICBwYXR0ZXJuOiAvXGIoXGQrKFwuXGQrKT8oZShcK3xcLSk/XGQrKT8oZnxkKT98MHhbXGRhLWZdKylcYi9naQogICAgfSwKICAgIHsKICAgICAgICBtYXRjaGVzOiB7CiAgICAgICAgICAgIDE6ICdrZXl3b3JkJwogICAgICAgIH0sCiAgICAgICAgcGF0dGVybjogL1xiKGFuZHxhcnJheXxhc3xiKG9vbChlYW4pP3xyZWFrKXxjKGFzZXxhdGNofGhhcnxsYXNzfG9uKHN0fHRpbnVlKSl8ZChlZnxlbGV0ZXxvKHVibGUpPyl8ZShjaG98bHNlKGlmKT98eGl0fHh0ZW5kc3x4Y2VwdCl8ZihpbmFsbHl8bG9hdHxvcihlYWNoKT98dW5jdGlvbil8Z2xvYmFsfGlmfGltcG9ydHxpbnQoZWdlcik/fGxvbmd8bmV3fG9iamVjdHxvcnxwcihpbnR8aXZhdGV8b3RlY3RlZCl8cHVibGljfHJldHVybnxzZWxmfHN0KHJpbmd8cnVjdHxhdGljKXxzd2l0Y2h8dGgoZW58aXN8cm93KXx0cnl8KHVuKT9zaWduZWR8dmFyfHZvaWR8d2hpbGUpKD89XGIpL2dpCiAgICB9LAogICAgewogICAgICAgIG5hbWU6ICdjb25zdGFudC5sYW5ndWFnZScsCiAgICAgICAgcGF0dGVybjogL3RydWV8ZmFsc2V8bnVsbC9nCiAgICB9LAogICAgewogICAgICAgIG5hbWU6ICdrZXl3b3JkLm9wZXJhdG9yJywKICAgICAgICBwYXR0ZXJuOiAvXCt8XCF8XC18JihndHxsdHxhbXApO3xcfHxcKnxcPS9nCiAgICB9LAogICAgewogICAgICAgIG1hdGNoZXM6IHsKICAgICAgICAgICAgMTogJ2Z1bmN0aW9uLmNhbGwnCiAgICAgICAgfSwKICAgICAgICBwYXR0ZXJuOiAvKFx3Kz8pKD89XCgpL2cKICAgIH0sCiAgICB7CiAgICAgICAgbWF0Y2hlczogewogICAgICAgICAgICAxOiAnc3RvcmFnZS5mdW5jdGlvbicsCiAgICAgICAgICAgIDI6ICdlbnRpdHkubmFtZS5mdW5jdGlvbicKICAgICAgICB9LAogICAgICAgIHBhdHRlcm46IC8oZnVuY3Rpb24pXHMoLio/KSg/PVwoKS9nCiAgICB9Cl0pOwo=","base64"),
  "rainbow/html.js": 
      Buffer("LyoqCiAqIEhUTUwgcGF0dGVybnMKICoKICogQGF1dGhvciBDcmFpZyBDYW1wYmVsbAogKi8KUmFpbmJvdy5leHRlbmQoJ2h0bWwnLCBbCiAgICB7CiAgICAgICAgbmFtZTogJ3NvdXJjZS5waHAuZW1iZWRkZWQnLAogICAgICAgIG1hdGNoZXM6IHsKICAgICAgICAgICAgMTogJ3ZhcmlhYmxlLmxhbmd1YWdlLnBocC10YWcnLAogICAgICAgICAgICAyOiB7CiAgICAgICAgICAgICAgICBsYW5ndWFnZTogJ3BocCcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgMzogJ3ZhcmlhYmxlLmxhbmd1YWdlLnBocC10YWcnCiAgICAgICAgfSwKICAgICAgICBwYXR0ZXJuOiAvKCZsdDtcP3BocHwmbHQ7XD89Pyg/IXhtbCkpKFtcc1xTXSo/KShcPyZndDspL2dtCiAgICB9LAogICAgewogICAgICAgIG5hbWU6ICdzb3VyY2UuY3NzLmVtYmVkZGVkJywKICAgICAgICBtYXRjaGVzOiB7CiAgICAgICAgICAgIDE6IHsKICAgICAgICAgICAgICAgIG1hdGNoZXM6IHsKICAgICAgICAgICAgICAgICAgICAxOiAnc3VwcG9ydC50YWcuc3R5bGUnLAogICAgICAgICAgICAgICAgICAgIDI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ2VudGl0eS50YWcuc3R5bGUnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0dGVybjogL15zdHlsZS9nCiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdzdHJpbmcnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0dGVybjogLygnfCIpKC4qPykoXDEpL2cKICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ2VudGl0eS50YWcuc3R5bGUuYXR0cmlidXRlJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdHRlcm46IC8oXHcrKS9nCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgIDM6ICdzdXBwb3J0LnRhZy5zdHlsZScKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBwYXR0ZXJuOiAvKCZsdDtcLz8pKHN0eWxlLio/KSgmZ3Q7KS9nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIDI6IHsKICAgICAgICAgICAgICAgIGxhbmd1YWdlOiAnY3NzJwogICAgICAgICAgICB9LAogICAgICAgICAgICAzOiAnc3VwcG9ydC50YWcuc3R5bGUnLAogICAgICAgICAgICA0OiAnZW50aXR5LnRhZy5zdHlsZScsCiAgICAgICAgICAgIDU6ICdzdXBwb3J0LnRhZy5zdHlsZScKICAgICAgICB9LAogICAgICAgIHBhdHRlcm46IC8oJmx0O3N0eWxlLio/Jmd0OykoW1xzXFNdKj8pKCZsdDtcLykoc3R5bGUpKCZndDspL2dtCiAgICB9LAogICAgewogICAgICAgIG5hbWU6ICdzb3VyY2UuanMuZW1iZWRkZWQnLAogICAgICAgIG1hdGNoZXM6IHsKICAgICAgICAgICAgMTogewogICAgICAgICAgICAgICAgbWF0Y2hlczogewogICAgICAgICAgICAgICAgICAgIDE6ICdzdXBwb3J0LnRhZy5zY3JpcHQnLAogICAgICAgICAgICAgICAgICAgIDI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ2VudGl0eS50YWcuc2NyaXB0JywKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdHRlcm46IC9ec2NyaXB0L2cKICAgICAgICAgICAgICAgICAgICAgICAgfSwKCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdzdHJpbmcnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0dGVybjogLygnfCIpKC4qPykoXDEpL2cKICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ2VudGl0eS50YWcuc2NyaXB0LmF0dHJpYnV0ZScsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXR0ZXJuOiAvKFx3KykvZwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAzOiAnc3VwcG9ydC50YWcuc2NyaXB0JwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHBhdHRlcm46IC8oJmx0O1wvPykoc2NyaXB0Lio/KSgmZ3Q7KS9nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIDI6IHsKICAgICAgICAgICAgICAgIGxhbmd1YWdlOiAnamF2YXNjcmlwdCcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgMzogJ3N1cHBvcnQudGFnLnNjcmlwdCcsCiAgICAgICAgICAgIDQ6ICdlbnRpdHkudGFnLnNjcmlwdCcsCiAgICAgICAgICAgIDU6ICdzdXBwb3J0LnRhZy5zY3JpcHQnCiAgICAgICAgfSwKICAgICAgICBwYXR0ZXJuOiAvKCZsdDtzY3JpcHQoPyEgc3JjKS4qPyZndDspKFtcc1xTXSo/KSgmbHQ7XC8pKHNjcmlwdCkoJmd0OykvZ20KICAgIH0sCiAgICB7CiAgICAgICAgbmFtZTogJ2NvbW1lbnQuaHRtbCcsCiAgICAgICAgcGF0dGVybjogLyZsdDtcIS0tW1xTXHNdKj8tLSZndDsvZwogICAgfSwKICAgIHsKICAgICAgICBtYXRjaGVzOiB7CiAgICAgICAgICAgIDE6ICdzdXBwb3J0LnRhZy5vcGVuJywKICAgICAgICAgICAgMjogJ3N1cHBvcnQudGFnLmNsb3NlJwogICAgICAgIH0sCiAgICAgICAgcGF0dGVybjogLygmbHQ7KXwoXC8/XD8/Jmd0OykvZwogICAgfSwKICAgIHsKICAgICAgICBuYW1lOiAnc3VwcG9ydC50YWcnLAogICAgICAgIG1hdGNoZXM6IHsKICAgICAgICAgICAgMTogJ3N1cHBvcnQudGFnJywKICAgICAgICAgICAgMjogJ3N1cHBvcnQudGFnLnNwZWNpYWwnLAogICAgICAgICAgICAzOiAnc3VwcG9ydC50YWctbmFtZScKICAgICAgICB9LAogICAgICAgIHBhdHRlcm46IC8oJmx0O1w/PykoXC98XCE/KShcdyspL2cKICAgIH0sCiAgICB7CiAgICAgICAgbWF0Y2hlczogewogICAgICAgICAgICAxOiAnc3VwcG9ydC5hdHRyaWJ1dGUnCiAgICAgICAgfSwKICAgICAgICBwYXR0ZXJuOiAvKFthLXotXSspKD89XD0pL2dpCiAgICB9LAogICAgewogICAgICAgIG1hdGNoZXM6IHsKICAgICAgICAgICAgMTogJ3N1cHBvcnQub3BlcmF0b3InLAogICAgICAgICAgICAyOiAnc3RyaW5nLnF1b3RlJywKICAgICAgICAgICAgMzogJ3N0cmluZy52YWx1ZScsCiAgICAgICAgICAgIDQ6ICdzdHJpbmcucXVvdGUnCiAgICAgICAgfSwKICAgICAgICBwYXR0ZXJuOiAvKD0pKCd8IikoLio/KShcMikvZwogICAgfSwKICAgIHsKICAgICAgICBtYXRjaGVzOiB7CiAgICAgICAgICAgIDE6ICdzdXBwb3J0Lm9wZXJhdG9yJywKICAgICAgICAgICAgMjogJ3N1cHBvcnQudmFsdWUnCiAgICAgICAgfSwKICAgICAgICBwYXR0ZXJuOiAvKD0pKFthLXpBLVpcLTAtOV0qKVxiL2cKICAgIH0sCiAgICB7CiAgICAgICAgbWF0Y2hlczogewogICAgICAgICAgICAxOiAnc3VwcG9ydC5hdHRyaWJ1dGUnCiAgICAgICAgfSwKICAgICAgICBwYXR0ZXJuOiAvXHMoW1x3LV0rKSg/PVxzfCZndDspKD8hW1xzXFNdKiZsdDspL2cKICAgIH0KXSk7CgpSYWluYm93LmFkZEFsaWFzKCd4bWwnLCAnaHRtbCcpOwo=","base64"),
  "rainbow/github.css": 
      Buffer("QGtleWZyYW1lcyBmYWRlLWluezAle29wYWNpdHk6MH0xMDAle29wYWNpdHk6MX19QGtleWZyYW1lcyBmYWRlezEwJXt0cmFuc2Zvcm06c2NhbGUoMSwgMSl9MzUle3RyYW5zZm9ybTpzY2FsZSgxLCAxLjcpfTQwJXt0cmFuc2Zvcm06c2NhbGUoMSwgMS43KX01MCV7b3BhY2l0eToxfTYwJXt0cmFuc2Zvcm06c2NhbGUoMSwgMSl9MTAwJXt0cmFuc2Zvcm06c2NhbGUoMSwgMSk7b3BhY2l0eTowfX1bZGF0YS1sYW5ndWFnZV0gY29kZSxbY2xhc3NePSJsYW5nIl0gY29kZSxwcmUgW2RhdGEtbGFuZ3VhZ2VdLHByZSBbY2xhc3NePSJsYW5nIl17b3BhY2l0eTowOy1tcy1maWx0ZXI6InByb2dpZDpEWEltYWdlVHJhbnNmb3JtLk1pY3Jvc29mdC5BbHBoYShPcGFjaXR5PTEwMCkiO2FuaW1hdGlvbjpmYWRlLWluIDUwbXMgZWFzZS1pbi1vdXQgMnMgZm9yd2FyZHN9W2RhdGEtbGFuZ3VhZ2VdIGNvZGUucmFpbmJvdyxbY2xhc3NePSJsYW5nIl0gY29kZS5yYWluYm93LHByZSBbZGF0YS1sYW5ndWFnZV0ucmFpbmJvdyxwcmUgW2NsYXNzXj0ibGFuZyJdLnJhaW5ib3d7YW5pbWF0aW9uOm5vbmU7dHJhbnNpdGlvbjpvcGFjaXR5IDUwbXMgZWFzZS1pbi1vdXR9W2RhdGEtbGFuZ3VhZ2VdIGNvZGUubG9hZGluZyxbY2xhc3NePSJsYW5nIl0gY29kZS5sb2FkaW5nLHByZSBbZGF0YS1sYW5ndWFnZV0ubG9hZGluZyxwcmUgW2NsYXNzXj0ibGFuZyJdLmxvYWRpbmd7YW5pbWF0aW9uOm5vbmV9W2RhdGEtbGFuZ3VhZ2VdIGNvZGUucmFpbmJvdy1zaG93LFtjbGFzc149ImxhbmciXSBjb2RlLnJhaW5ib3ctc2hvdyxwcmUgW2RhdGEtbGFuZ3VhZ2VdLnJhaW5ib3ctc2hvdyxwcmUgW2NsYXNzXj0ibGFuZyJdLnJhaW5ib3ctc2hvd3tvcGFjaXR5OjF9cHJle3Bvc2l0aW9uOnJlbGF0aXZlfXByZS5sb2FkaW5nIC5wcmVsb2FkZXIgZGl2e2FuaW1hdGlvbi1wbGF5LXN0YXRlOnJ1bm5pbmd9cHJlLmxvYWRpbmcgLnByZWxvYWRlciBkaXY6bnRoLW9mLXR5cGUoMSl7YmFja2dyb3VuZDojMDA4MWY1O2FuaW1hdGlvbjpmYWRlIDEuNXMgMzAwbXMgbGluZWFyIGluZmluaXRlfXByZS5sb2FkaW5nIC5wcmVsb2FkZXIgZGl2Om50aC1vZi10eXBlKDIpe2JhY2tncm91bmQ6IzUwMDBmNTthbmltYXRpb246ZmFkZSAxLjVzIDQzOG1zIGxpbmVhciBpbmZpbml0ZX1wcmUubG9hZGluZyAucHJlbG9hZGVyIGRpdjpudGgtb2YtdHlwZSgzKXtiYWNrZ3JvdW5kOiM5MDAwZjU7YW5pbWF0aW9uOmZhZGUgMS41cyA1NzdtcyBsaW5lYXIgaW5maW5pdGV9cHJlLmxvYWRpbmcgLnByZWxvYWRlciBkaXY6bnRoLW9mLXR5cGUoNCl7YmFja2dyb3VuZDojZjUwNDE5O2FuaW1hdGlvbjpmYWRlIDEuNXMgNzE1bXMgbGluZWFyIGluZmluaXRlfXByZS5sb2FkaW5nIC5wcmVsb2FkZXIgZGl2Om50aC1vZi10eXBlKDUpe2JhY2tncm91bmQ6I2Y1NzkwMDthbmltYXRpb246ZmFkZSAxLjVzIDg1M21zIGxpbmVhciBpbmZpbml0ZX1wcmUubG9hZGluZyAucHJlbG9hZGVyIGRpdjpudGgtb2YtdHlwZSg2KXtiYWNrZ3JvdW5kOiNmNWU2MDA7YW5pbWF0aW9uOmZhZGUgMS41cyA5OTJtcyBsaW5lYXIgaW5maW5pdGV9cHJlLmxvYWRpbmcgLnByZWxvYWRlciBkaXY6bnRoLW9mLXR5cGUoNyl7YmFja2dyb3VuZDojMDBmNTBjO2FuaW1hdGlvbjpmYWRlIDEuNXMgMTEzMG1zIGxpbmVhciBpbmZpbml0ZX1wcmUgLnByZWxvYWRlcntwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MTJweDtsZWZ0OjEwcHh9cHJlIC5wcmVsb2FkZXIgZGl2e3dpZHRoOjEycHg7aGVpZ2h0OjEycHg7Ym9yZGVyLXJhZGl1czo0cHg7ZGlzcGxheTppbmxpbmUtYmxvY2s7bWFyZ2luLXJpZ2h0OjRweDtvcGFjaXR5OjA7YW5pbWF0aW9uLXBsYXktc3RhdGU6cGF1c2VkO2FuaW1hdGlvbi1maWxsLW1vZGU6Zm9yd2FyZHN9cHJle2JvcmRlcjoxcHggc29saWQgI2NjYzt3b3JkLXdyYXA6YnJlYWstd29yZDtwYWRkaW5nOjZweCAxMHB4O2xpbmUtaGVpZ2h0OjE5cHg7bWFyZ2luLWJvdHRvbToyMHB4fXByZSBjb2Rle2JvcmRlcjowO3BhZGRpbmc6MDttYXJnaW46MDtib3JkZXItcmFkaXVzOjB9Y29kZXtib3JkZXI6MXB4IHNvbGlkICNlYWVhZWE7bWFyZ2luOjBweCAycHg7cGFkZGluZzowcHggNXB4O2ZvbnQtc2l6ZToxMnB4fXByZSxjb2Rle2ZvbnQtZmFtaWx5OkNvbnNvbGFzLCAnTGliZXJhdGlvbiBNb25vJywgQ291cmllciwgbW9ub3NwYWNlO2NvbG9yOiMzMzM7YmFja2dyb3VuZDojZjhmOGY4O2JvcmRlci1yYWRpdXM6M3B4fXByZSxwcmUgY29kZXtmb250LXNpemU6MTNweH1wcmUgLmNvbW1lbnR7Y29sb3I6Izk5OH1wcmUgLnN1cHBvcnR7Y29sb3I6IzAwODZCM31wcmUgLnRhZyxwcmUgLnRhZy1uYW1le2NvbG9yOm5hdnl9cHJlIC5rZXl3b3JkLHByZSAuY3NzLXByb3BlcnR5LHByZSAudmVuZG9yLWZpeCxwcmUgLnNhc3MscHJlIC5jbGFzcyxwcmUgLmlkLHByZSAuY3NzLXZhbHVlLHByZSAuZW50aXR5LmZ1bmN0aW9uLHByZSAuc3RvcmFnZS5mdW5jdGlvbntmb250LXdlaWdodDpib2xkfXByZSAuY3NzLXByb3BlcnR5LHByZSAuY3NzLXZhbHVlLHByZSAudmVuZG9yLWZpeCxwcmUgLnN1cHBvcnQubmFtZXNwYWNle2NvbG9yOiMzMzN9cHJlIC5jb25zdGFudC5udW1lcmljLHByZSAua2V5d29yZC51bml0LHByZSAuaGV4LWNvbG9ye2ZvbnQtd2VpZ2h0Om5vcm1hbDtjb2xvcjojMDk5fXByZSAuZW50aXR5LmNsYXNze2NvbG9yOiM0NTh9cHJlIC5lbnRpdHkuaWQscHJlIC5lbnRpdHkuZnVuY3Rpb257Y29sb3I6IzkwMH1wcmUgLmF0dHJpYnV0ZSxwcmUgLnZhcmlhYmxle2NvbG9yOnRlYWx9cHJlIC5zdHJpbmcscHJlIC5zdXBwb3J0LnZhbHVle2ZvbnQtd2VpZ2h0Om5vcm1hbDtjb2xvcjojZDE0fXByZSAucmVnZXhwe2NvbG9yOiMwMDk5MjZ9Cg==","base64"),
  "betterhtml/bhtml.css": 
      Buffer("LyogU1RBUlQ6IG1ha2Ugc3RpY2t5IGZvb3RlciAqLwoKLypodG1sLCBib2R5IHsKICBoZWlnaHQ6IDEwMHZoOwp9Ki8KYm9keSB7CiAgZGlzcGxheTogZmxleDsKICBtaW4taGVpZ2h0OiAxMDB2aDsKICBmbGV4LWRpcmVjdGlvbjogY29sdW1uOwp9Ci5ub24tZm9vdGVyLWNvbnRlbnQgewogIGZsZXg6IDEgMCBhdXRvOwp9Ci5mb290ZXItY29udGVudCB7CiAgZmxleC1zaHJpbms6IDA7Cn0KLyogRU5EOiBtYWtlIHN0aWNreSBmb290ZXIgKi8KCi5iaHRtbC10ZXh0IHsKICBtYXJnaW4tdG9wOiAxMHB4OwogIG1hcmdpbi1ib3R0b206IDEwcHg7Cn0KCi5wdXJlLWJ1dHRvbiB7CiAgdGV4dC1kZWNvcmF0aW9uOiBub25lOwp9CgphIHsKICBjb2xvcjogIzU0NTQ1NDsKfQoKLm5vLWxpbmstdW5kZXJsaW5lIGEgewogIHRleHQtZGVjb3JhdGlvbjogbm9uZTsKfQoKLm5vLWxpbmstdW5kZXJsaW5lIHsKICB0ZXh0LWRlY29yYXRpb246IG5vbmU7Cn0KCkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogNDhlbSkgewogIC5kZXNrdG9wb25seSB7CiAgICBkaXNwbGF5OiBub25lOwogIH0KfQoKQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA0OGVtKSB7CiAgLm1vYmlsZW9ubHkgewogICAgZGlzcGxheTogbm9uZTsKICB9Cn0KCkBrZXlmcmFtZXMgYmh0bWwtZmFkZS1pbiB7CiAgMCUge29wYWNpdHk6IDA7fQogIDEwMCUge29wYWNpdHk6IDE7fQp9CgpAa2V5ZnJhbWVzIGJodG1sLWZhZGUtb3V0IHsKICAwJSB7b3BhY2l0eTogMTt9CiAgMTAwJSB7b3BhY2l0eTogMDt9Cn0KCi5iaHRtbC1mYWRlLWluLWZhZGUtb3V0LWNsYXNzIHsKICAvKmRpc3BsYXk6IG5vbmU7Ki8KfQoK","base64"),
  "betterhtml/bhtml.js": 
      Buffer("Ly8gLy8gdGhpcyBzY3JpcHQgaXMgaW4gdGhlIGhlYWQgb2YgdGhlIHBhZ2UsIGFuZCBydW5zIGJlZm9yZSBib2R5IGlzIGxvYWRlZAoKLy8gdmFyIGZhZGluZ0luID0gdHJ1ZTsKCi8vIGZ1bmN0aW9uIGRvbmVGYWRpbmcoKSB7CgovLyB9CgovLyAvLyB0aGlzIGZ1bmN0aW9uIHJ1bnMgYWZ0ZXIgcGFnZSBsb2FkIGlmIHRoZXJlIGFyZSBhbnkgZWxlbWVudHMgd2l0aAovLyAvLyB0aGUgY2xhc3MgImJodG1sLWZhZGUtaW4tZmFkZS1vdXQtY2xhc3MiCi8vIGZ1bmN0aW9uIGV4aXN0RmFkZXJzKGVsZW1lbnRzKXsKLy8gICBhbmltYXRpb25FbmRzID0gWyJ3ZWJraXRBbmltYXRpb25FbmQiLCAibW96QW5pbWF0aW9uRW5kIiwgIm1zQW5pbWF0aW9uRW5kIiwgCi8vICAgICAib0FuaW1hdGlvbkVuZCIsICJhbmltYXRpb25FbmQiXTsKLy8gICAvLyBtYWtlIHRoZXNlIGVsZW1lbnRzIGxpc3RlbiBmb3IgdGhlIGVuZCBvZiB0aGVpciBhbmltYXRpb24KLy8gICBlbGVtZW50cy5mb3JFYWNoKGVsID0+IHsKLy8gICAgIGFuaW1hdGlvbkVuZHMuZm9yRWFjaChhbmltRW5kID0+IGVsLmFkZEV2ZW50TGlzdGVuZXIoYW5pbUVuZCwgZG9uZUZhZGluZykpOwovLyAgIH0pOwovLyB9CgovLyAvLyB0aGlzIGNhbGxiYWNrIGlzIHJ1biBvbmNlIHRoZSBib2R5IGlzIGxvYWRlZAovLyB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGZ1bmN0aW9uKCkgewovLyAgIC8vIGNoZWNrIGZvciAiYmh0bWwtZmFkZS1pbi1mYWRlLW91dC1jbGFzcyIKLy8gICB2YXIgZmFkZXJzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5Q2xhc3NOYW1lKCJiaHRtbC1mYWRlLWluLWZhZGUtb3V0LWNsYXNzIik7Ci8vICAgaWYgKGZhZGVycy5sZW5ndGggPiAwKSB7Ci8vICAgICBleGlzdEZhZGVycyhmYWRlcnMpOwovLyAgIH0KLy8gfSk7Cg==","base64"),
  "filenames": [
    "purecss/grids-responsive-min.css",
    "purecss/pure-min.css",
    "rainbow/rainbow.js",
    "rainbow/generic.js",
    "rainbow/html.js",
    "rainbow/github.css",
    "betterhtml/bhtml.css",
    "betterhtml/bhtml.js",
  ],
  // some boilerplate files
  "index.yml": Buffer("LS0tCnR5cGU6IHBhZ2UKcGFnZS1uYW1lOiBJbmRleAotLS0KCi0gWW91ciBmcmVzaCBuZXcgQkhUTUwgd2Vic2l0ZS4K","base64"),
  "settings.yml": Buffer("CnRpdGxlOiBNeSBUaXRsZQo=","base64"),
  "parameters.yml": Buffer("LS0tCnR5cGU6IGdsb2JhbC1wYXJhbWV0ZXIKLS0tCgpteS12YXJpYWJsZTogSGVsbG8hCg==","base64"),
  "styles.yml": Buffer("LS0tCnR5cGU6IHN0eWxlCi0tLQoKbXktc3R5bGU6IAogIGZvbnQtc2l6ZTogMTUwJQogIGNvbG9yOiByZWQKICA=","base64"),
  "templates.yml": Buffer("LS0tCnR5cGU6IHRlbXBsYXRlCi0tLQoKYmFzaWMtcGFnZToKICAtICQkIHRlbXBsYXRlIGhlYWRlcgogIC0gJCQgcGFyYW0gY29udGVudAogIC0gJCQgdGVtcGxhdGUgZm9vdGVy","base64"),
  "index-tutorial.yml": Buffer("LS0tCnR5cGU6IHBhZ2UKcGFnZS1uYW1lOiBJbmRleAotLS0KCi0gdGV4dC1jZW50ZXJlZCAoc3R5bGUgbXktc3R5bGUpOiAKICAgIGNvbnRlbnQ6IFlvdXIgZnJlc2ggbmV3IEJIVE1MIHdlYnNpdGUuCi0gdGV4dC0xNTAlLWNlbnRlcmVkIChjb2xvciBibHVlKTogQ2hhbmdlIHNvbWUgc3R1ZmYgYXJvdW5kLCBzZWUgd2hhdCBoYXBwZW5zLgotIHJvdy1jZW50ZXJlZDoKICAgIC0gJCQgdGVtcGxhdGUgcGluay1ib3g6CiAgICAgICAgLSBZb3UgY2FuIHVzZSByb3dzIGFuZCBjb2x1bW5zIGluIHlvdXIgd2Vic2l0ZS4KICAgIC0gJCQgdGVtcGxhdGUgcGluay1ib3g6CiAgICAgICAgLSBUaGV5J3JlIHJlc3BvbnNpdmUgYW5kIHN0YWNrIG9uIG1vYmlsZS4KICAgIC0gJCQgdGVtcGxhdGUgcGluay1ib3g6CiAgICAgICAgLSB8CiAgICAgICAgICBWaXNpdCB0aGUgdHV0b3JpYWwgaWYgeW91IG5lZWQgaGVscDo8YnIgLz4KICAgICAgICAgIFtiZXR0ZXItaHRtbC5jb20vdHV0b3JpYWxdKGJldHRlci1odG1sLmNvbS90dXRvcmlhbCkK","base64"),
  "templates-tutorial.yml": Buffer("LS0tCnR5cGU6IHRlbXBsYXRlCi0tLQoKYmFzaWMtcGFnZToKICAtICQkIHRlbXBsYXRlIGhlYWRlcgogIC0gJCQgcGFyYW0gY29udGVudAogIC0gJCQgdGVtcGxhdGUgZm9vdGVyCgpwaW5rLWJveDoKICAtIGNvbnRhaW5lciAocGFkZGluZyAxMHB4KToKICAgICAgLSBjb250YWluZXIgKGJhY2tncm91bmQtY29sb3IgcGluaykgKHBhZGRpbmcgMTBweCkgKGJvcmRlci1yYWRpdXMgMTBweCk6CiAgICAgICAgICAtICQkIHBhcmFtIGNvbnRlbnQKICAgICAgICAgIA==","base64"),
  // starter template descriptions
  templates: {
    empty: {
      normalInclude: []
    },
    basic: {
      normalInclude: ["index.yml", "settings.yml", "styles.yml", "parameters.yml", "templates.yml"]
    },
    tutorial: {
      normalInclude: ["settings.yml", "styles.yml", "parameters.yml"],
      specialInclude: {
        "index.yml": "index-tutorial.yml",
        "templates.yml": "templates-tutorial.yml"
      }
    },
    advanced: {
      normalInclude: []
    }
  }
}

},{}]},{},[1])(1)
});
